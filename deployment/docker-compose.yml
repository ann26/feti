#
# Production server with UWSGI configured to run on port 8080
#
# Usage:
# docker-compose -f docker-compose-*.yml <command>
#
# Typical useage:
#
# docker-compose build
# docker-compose up -d web
#
# See accompanying Make commands for easy collectstatic etc.

# Our docker-gen service reloads nginx with dynamically generated
# templates each time a container is brought up / down
# See https://registry.hub.docker.com/u/jwilder/nginx-proxy/
# This one uses a template for nginx proxying (see above for http)
#
# Note: Currently this is experimental and not being used.
#

smtp:
  restart: always
#  read_only: true
  image: catatnight/postfix
  hostname: postfix
  environment:
    # You could change this to something more suitable
    - maildomain=kartoza.com
    - smtp_user=noreply:docker

elasticsearch:
  restart: always
#  read_only: true
  image: elasticsearch
  hostname: elasticsearch
  environment:
    - HAYSTACK_PORT=9200

db:
  restart: always
  image: kartoza/postgis:9.3
  volumes:
    - ./pg/postgres_data:/var/lib/postgresql
    - ./setup_data:/home/setup
  environment:
    - USERNAME=docker
    - PASS=docker

dbbackups:
  restart: always
  image: kartoza/pg-backup
  hostname: pg-backups
  volumes:
    - ./backups:/backups
  links:
    - db:db
  environment:
    - DUMPPREFIX=PG_FETI
    # These are all defaults anyway, but setting explicitly in
    # case we ever want to ever use different credentials
    - PGUSER=docker
    - PGPASSWORD=docker
    - PGPORT=5432
    - PGHOST=db
    - PGDATABASE=gis

uwsgi:
  restart: always
  build: docker-prod
  hostname: uwsgi
  environment:
    - DATABASE_NAME=gis
    - DATABASE_USERNAME=docker
    - DATABASE_PASSWORD=docker
    - DATABASE_HOST=db
    - DJANGO_SETTINGS_MODULE=core.settings.prod_docker
    - VIRTUAL_HOST=users.inasafe.org
    - VIRTUAL_PORT=8080
    - HAYSTACK_HOST=elasticsearch
  volumes:
    - ../django_project:/home/web/django_project
    - ./static:/home/web/static
    - ./media:/home/web/media
    - ./logs:/var/log/
  links:
    - smtp:smtp
    - db:db
    - elasticsearch:elasticsearch

web:
#  read_only: true
  restart: always
  image: nginx
  hostname: nginx
  volumes:
    - ./sites-enabled:/etc/nginx/conf.d:ro
    # I dont use volumes_from as I want to use the ro modifier
    - ./static:/home/web/static:ro
    - ./media:/home/web/media:ro
    - ./logs:/var/log/nginx
  links:
    - uwsgi:uwsgi
  ports:
    - "63100:8080"

# Exactly the same as web but for staging we use a different port.
stagingweb:
  read_only: true
  restart: always
  image: nginx
  hostname: nginx
  volumes:
    - ./sites-enabled:/etc/nginx/conf.d:ro
    # I dont use volumes_from as I want to use the ro modifier
    - ./static:/home/web/static:ro
    - ./media:/home/web/media:ro
    - ./logs:/var/log/nginx
    - ./reports:/home/web/reports
  links:
    - uwsgi:uwsgi
  ports:
    - "63101:8080"
